// Generated by CoffeeScript 1.10.0
(function() {
  var Miami, PI, SFO, Sydney, Ushuaia, WGS84Util, expect;

  WGS84Util = require('../');

  expect = require('expect.js');

  PI = Math.PI;

  SFO = null;

  Sydney = null;

  Miami = null;

  Ushuaia = null;

  describe('WGS84Coord', function() {
    beforeEach(function() {
      SFO = {
        "type": "Point",
        "coordinates": [-122.375, 37.618889]
      };
      Sydney = {
        "type": "Point",
        "coordinates": [151.209444, -33.865]
      };
      Ushuaia = {
        "type": "Point",
        "coordinates": [-68.3, -54.8]
      };
      return Miami = {
        "type": "Point",
        "coordinates": [-80.208889, 25.775278]
      };
    });
    describe('degToRad(deg)', function() {
      return it('should calculate correct radians from deg', function() {
        return expect(WGS84Util.degToRad(90)).to.equal(PI / 2);
      });
    });
    describe('radToDeg(rad)', function() {
      return it('should calculate correct degrees from rad', function() {
        return expect(WGS84Util.radToDeg(PI / 2)).to.equal(90);
      });
    });
    describe('LLtoUTM(ll)', function() {
      it('should convert a GeoJSON point to UTM point (North)', function() {
        var utm;
        utm = WGS84Util.LLtoUTM(SFO);
        expect(utm.geometry.coordinates[0]).to.equal(555156.4);
        expect(utm.geometry.coordinates[1]).to.equal(4163715);
        expect(utm.properties.zoneLetter).to.equal('N');
        return expect(utm.properties.zoneNumber).to.equal(10);
      });
      return it('should convert a GeoJSON point to UTM point (South)', function() {
        var utm;
        utm = WGS84Util.LLtoUTM(Sydney);
        expect(utm.geometry.coordinates[0]).to.equal(334374.6);
        expect(utm.geometry.coordinates[1]).to.equal(6251370);
        expect(utm.properties.zoneLetter).to.equal('S');
        return expect(utm.properties.zoneNumber).to.equal(56);
      });
    });
    describe('UTMtoLL(utm)', function() {
      it('should convert a UTM point to GeoJSON point with longitude and latitude (North)', function() {
        var latlng, utm;
        utm = {
          "type": "Feature",
          "geometry": WGS84Util.LLtoUTM(SFO).geometry,
          "properties": {
            "zoneLetter": 'N',
            "zoneNumber": 10
          }
        };
        latlng = WGS84Util.UTMtoLL(utm);
        expect(latlng.coordinates[0]).to.equal(-122.3749996641);
        return expect(latlng.coordinates[1]).to.equal(37.6188892858);
      });
      return it('should convert a UTM point to GeoJSON point with longitude and latitude (South)', function() {
        var latlng, utm;
        utm = {
          "type": "Feature",
          "geometry": WGS84Util.LLtoUTM(Sydney).geometry,
          "properties": {
            "zoneLetter": 'S',
            "zoneNumber": 56
          }
        };
        latlng = WGS84Util.UTMtoLL(utm);
        expect(latlng.coordinates[0]).to.equal(151.2094438586);
        return expect(latlng.coordinates[1]).to.equal(-33.8649998489);
      });
    });
    describe('distanceBetween(pointA, pointB, bearings)', function() {
      it('should calculate the distance between two points (North)', function() {
        var distance;
        distance = WGS84Util.distanceBetween(Sydney, SFO);
        return expect(distance).to.equal(11929093.5189);
      });
      it('should calculate the distance between two points (South)', function() {
        var distance;
        distance = WGS84Util.distanceBetween(SFO, Sydney);
        return expect(distance).to.equal(11929093.5189);
      });
      return it('should also return distance and bearings when setting bearings switch', function() {
        var results;
        results = WGS84Util.distanceBetween(SFO, Sydney, true);
        expect(results.distance).to.equal(11929093.5189);
        expect(results.initialBearing).to.equal(240.45353888221996);
        return expect(results.finalBearing).to.equal(236.1028035327904);
      });
    });
    describe('bearingsBetween(pointA, pointB)', function() {
      it('should calculate the initial and final bearings between two points (North)', function() {
        var bearings;
        bearings = WGS84Util.bearingsBetween(Sydney, SFO);
        expect(bearings.initialBearing).to.equal(56.102803532790425);
        return expect(bearings.finalBearing).to.equal(60.453538882219966);
      });
      return it('should calculate the initial and final bearings between two points (South)', function() {
        var bearings;
        bearings = WGS84Util.bearingsBetween(SFO, Sydney);
        expect(bearings.initialBearing).to.equal(240.45353888221996);
        return expect(bearings.finalBearing).to.equal(236.1028035327904);
      });
    });
    return describe('destination(point, bearing, distance)', function() {
      it('should calculate the destination point and final bearing given initial bearing and distance (North)', function() {
        var destination;
        destination = WGS84Util.destination(Ushuaia, 349.123708, 8999490.846);
        expect(destination.point.coordinates[0]).to.equal(-80.2088887002);
        expect(destination.point.coordinates[1]).to.equal(25.7752778026);
        return expect(destination.finalBearing).to.equal(353.05145586712024);
      });
      return it('should calculate the destination point and final bearing given initial bearing and distance (South)', function() {
        var destination;
        destination = WGS84Util.destination(Miami, 173.051456, 8999490.846);
        expect(destination.point.coordinates[0]).to.equal(-68.3000005798);
        expect(destination.point.coordinates[1]).to.equal(-54.7999998325);
        return expect(destination.finalBearing).to.equal(169.12370827323568);
      });
    });
  });

}).call(this);
